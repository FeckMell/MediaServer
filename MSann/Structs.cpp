#include "stdafx.h"
#include "Structs.h"

//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
IPar::IPar(char* argv_[])
{
	data.resize(maxParamNames);
	/*for (int i = 0; i < maxParamNames; ++i)
	{
		data[i] = argv_[i + 1];
	}*///RELEASE
	//DEBUG
	data[modulName] = "ann";
	data[innerIP] = "127.0.0.1";
	data[innerPort] = "2428";
	data[outerIP] = "10.77.7.5";
	data[pathMedia] = "C:\\Projects\\LIBS\\MGCPnew\\Release\\MediaFiles";
	data[pathHome] = "C:\\Projects\\LIBS\\MGCPnew\\Release";
	data[logLevel] = "100";
}
//*///------------------------------------------------------------------------------------------
string IPar::GetParams()
{
	string result = "";

	result += "\nmodulName: " + data[modulName];
	result += "\nInner port: " + data[innerPort];
	result += "\nInner IP: " + data[innerIP];
	result += "\nOuter IP: " + data[outerIP];
	result += "\nLogLevel: " + data[logLevel];
	result += "\nMediaPath:\n" + data[pathMedia];
	result += "\nParsed path to application(home folder for MGCP server):\n" + data[pathHome];
	return result + "\n";
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
Socket::Socket(string ip_, int port_, boost::asio::io_service& io_) :s(io_)
{
	using boost::asio::ip::udp;
	s.open(udp::v4());
	s.set_option(udp::socket::reuse_address(true));
	s.bind(udp::endpoint(boost::asio::ip::address::from_string(ip_), port_));
}
Socket::~Socket()
{
	s.close();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
RTP_struct::RTP_struct()
{
	Config();
}
//*///------------------------------------------------------------------------------------------
void RTP_struct::Config()
{
	this->header.version = 2;
	this->header.marker = 0;
	this->header.csrc_len = 0;
	this->header.extension = 0;
	this->header.padding = 0;
	this->header.ssrc = htons(10);
	this->header.payload_type = 8;
	this->header.timestamp = htonl(0);
	this->header.seq_no = htons(0);
}
//*///------------------------------------------------------------------------------------------
RTP RTP_struct::Get()
{
	++this->amount;
	this->header.seq_no = htons(this->amount);
	this->header.timestamp = htonl(160 * this->amount);

	return header;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
CAVPacket::CAVPacket()
{
	av_init_packet(&packet);
	packet.data = nullptr;
	packet.size = 0;
}
//*///------------------------------------------------------------------------------------------
CAVPacket::CAVPacket(size_t sz)
{
	if (sz > 0)
		av_new_packet(&packet, sz);
	else
	{
		av_init_packet(&packet);
		packet.data = nullptr;
		packet.size = 0;
	}
}
//*///------------------------------------------------------------------------------------------
CAVPacket::~CAVPacket()
{
	Free();
}
//*///------------------------------------------------------------------------------------------
AVPacket* CAVPacket::Get()
{
	return &packet;
}
//*///------------------------------------------------------------------------------------------
int CAVPacket::Size()
{
	return packet.size;
}
//*///------------------------------------------------------------------------------------------
uint8_t* CAVPacket::Data()
{
	return packet.data;
}
//*///------------------------------------------------------------------------------------------
void CAVPacket::Free()
{
	av_free_packet(&packet);
}
//*///------------------------------------------------------------------------------------------
void CAVPacket::MakeSize(int n)
{
	packet.size = n;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------