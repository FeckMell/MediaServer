#include "stdafx.h"
#include "Control.h"

//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
Control::Control()
{
	//
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Control::CR(SHP_IPL ipl_)
{
	if (FindCnf(ipl_) != nullptr)
	{
		//reply error.
		cout << "\nControl::CR error";
		return;
	}
	SHP_Cnf new_cnf = make_shared<Cnf>(ipl_);
	vecCnf.push_back(new_cnf);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Control::MD(SHP_IPL ipl_)
{
	SHP_Cnf found_cnf = FindCnf(ipl_);
	if (found_cnf == nullptr)
	{
		//reply error.
		cout << "\nControl::MD error";
		return;
	}
	found_cnf->MD(ipl_);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Control::DL(SHP_IPL ipl_)
{
	SHP_Cnf found_cnf = FindCnf(ipl_);
	if (found_cnf == nullptr)
	{
		//reply error.
		cout << "\nControl::DL error";
		return;
	}
	found_cnf->DL(ipl_);
	RemoveCnf(found_cnf);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Control::Preprocessing(SHP_IPL ipl_)
{
	switch (ipl_->type)
	{
	case IPL::cr:
		CR(ipl_);
		break;
	case IPL::md:
		MD(ipl_);
		break;
	case IPL::dl:
		DL(ipl_);
		break;
	default:
		cout << "\nDEFAULT Control::Preprocessing.";
	}
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
SHP_Cnf Control::FindCnf(SHP_IPL ipl_)
{
	if (vecCnf.size() == 0) return nullptr;
	for (auto& cnf : vecCnf) if (cnf->cnfID == ipl_->data[IPL::eventID]) return cnf;
	return nullptr;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Control::RemoveCnf(SHP_Cnf cnf_)
{
	vecCnf.erase(remove(vecCnf.begin(), vecCnf.end(), cnf_), vecCnf.end());
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------