#include "stdafx.h"
#include "Parser.h"

//-------------------------------------------------------------------------------------
SIP::SIP(string){}
//-------------------------------------------------------------------------------------
std::string SIP::ResponseOK(int code, string end){ return " "; }
//-------------------------------------------------------------------------------------
std::string SIP::ResponseBAD(int code, string message){ return " "; }
//-------------------------------------------------------------------------------------
std::string SIP::ResponseRING(int code, string mess){ return " "; }
//-------------------------------------------------------------------------------------
void SIP::Parse(bool)
{
	Remove();
	P_CMD();
	P_MaxForwards();
	P_CallID();

	auto fd = sip.find("v=0");
	if (fd != std::string::npos){ SDP = sip.substr(fd); }
}
//-------------------------------------------------------------------------------------
void SIP::P_CMD()
{
	if (sip.find("INVITE") != std::string::npos) { CMD = INVITE; }
	else if (sip.find("ACK") != std::string::npos) { CMD = ACK; }
	else if (sip.find("BYE") != std::string::npos) { CMD = BYE; }
	else if (sip.find("Ringing") != std::string::npos) { CMD = Ringing; }
	else if (sip.find("200 OK") != std::string::npos) { CMD = OK; }
	else { error = -1; }
}
//-------------------------------------------------------------------------------------
void SIP::Remove()
{
	auto fd = sip.find("\r");
	while (fd != std::string::npos)
	{
		sip.erase(sip.begin() + fd);
		fd = sip.find("\r", fd - 1);
	}
	fd = sip.find("  ");
	while (fd != std::string::npos)
	{
		sip.erase(sip.begin() + fd);
		fd = sip.find("  ", fd - 1);
	}
}
//-------------------------------------------------------------------------------------
void SIP::P_MaxForwards()
{
	maxForwards = get_substr(sip, "Max-Forwards: ", "\n");
	if (maxForwards == "") error = -2;
}
//-------------------------------------------------------------------------------------
void SIP::P_CallID()
{
	CallID = get_substr(sip, "Call-ID: ", "\n");
	if (CallID=="") error = -3;
}
//-------------------------------------------------------------------------------------
void SIP::P_seq()
{
	string temp = get_substr(sip, "CSeq: ", "\n");
	CseqNum = temp.substr(0, temp.find(" "));
	CseqCMD = temp.substr(temp.find(" "));
	if (CseqCMD == "" || CseqNum == "") error = -4;
}
//-------------------------------------------------------------------------------------
void SIP::P_tag()
{
	tag = get_substr(sip, ";tag=", "\n");
}
//-------------------------------------------------------------------------------------
void SIP::P_branch()
{
	if (CMD == INVITE || CMD == ACK || CMD == BYE)
		branch = get_substr(sip, ";branch=", "\n");
	else branch = get_substr(sip, ";branch=", ";");
}
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
MGCP::MGCP(string req) :mgcp(req)
{
	error = 0;
	Parse(false);
}
//-------------------------------------------------------------------------------------
string MGCP::ResponseOK(int code, string end)
{
	auto response = boost::to_string(code) + " " + /*boost::to_string(stoi(MessNum) + 1)*/MessNum + " OK";
	if (end != "")
	{
		response += "\nZ: " + end + EventNum + EventEx.substr(EventEx.find("@"));
		response += "\nI: " + boost::to_string(rand() % 1000);
	}
	return response;
}
//-------------------------------------------------------------------------------------
std::string MGCP::ResponseBAD(int code, string message)
{
	auto response = boost::to_string(code) + " " + boost::to_string(stoi(MessNum) + 1) + " BAD";
	if (message != "")
	{
		response += "\nZ: " + message;
	}
	return response;
}
//-------------------------------------------------------------------------------------
void MGCP::Parse(bool m)
{
	if(m) mgcp = string(mes);
	Remove();
	parseCMD();
	EventP();
	ParamM();
	ParamC();
	paramL = get_substr(mgcp, "L: ", "\n");
	paramI = get_substr(mgcp, "I: ", "\n");
	paramZ = get_substr(mgcp, "Z: ", "\n");
	paramS = get_substr(mgcp, "S: ", "\n");
	auto fd = mgcp.find("\nv=0\n");
	if (fd != std::string::npos){ SDP = mgcp.substr(fd + 1); }
}
//-------------------------------------------------------------------------------------
void MGCP::parseCMD()
{
	std::string temp = mgcp.substr(0, 4);
	if (temp == "RQNT"){ CMD = "RQNT"; }
	else if (temp == "MDCX"){ CMD = "MDCX"; }
	else if (temp == "CRCX"){ CMD = "CRCX"; }
	else if (temp == "DLCX"){ CMD = "DLCX"; }
	else{ error = -1; }
} //DONE
//-------------------------------------------------------------------------------------
void MGCP::EventP()
{
	auto fd = mgcp.find("ann/");
	if (fd != std::string::npos)
	{
		Event = ann;
		EventS = "ann/";
	}
	else if (mgcp.find("cnf/") != std::string::npos)
	{
		Event = cnf;
		EventS = "cnf/";
		fd = mgcp.find("cnf/");
	}
	else if (mgcp.find("prx/") != std::string::npos)
	{
		Event = prx;
		EventS = "prx/";
		fd = mgcp.find("prx/");
	}
	else { error = -1; return; }

	if (mgcp.find("@") == std::string::npos) { error = -1; return; }
	EventNum = mgcp.substr(fd + 4, mgcp.find("@") - fd - 4);
	EventEx = mgcp.substr(fd, mgcp.find("] ", fd) - fd + 1);
	MessNum = mgcp.substr(mgcp.find(" ") + 1, fd - 6);
}
//-------------------------------------------------------------------------------------
void MGCP::ParamM()
{
	if (mgcp.find("confrnce") != std::string::npos){ paramM = "confrnce"; }
	else if (mgcp.find("inactive") != std::string::npos){ paramM = "inactive"; }
	else if (mgcp.find("sendrecv") != std::string::npos){ paramM = "sendrecv"; }

}
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
void MGCP::ParamC()
{
	paramC = get_substr(mgcp, "C: ", "\n");
	if (paramC == "") { paramC = get_substr(mgcp, "X: ", "\n"); }
}
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
void MGCP::Remove()
{
	auto fd = mgcp.find("\r");
	while (fd != std::string::npos)
	{
		mgcp.erase(mgcp.begin() + fd);
		fd = mgcp.find("\r", fd - 1);
	}
	fd = mgcp.find("  ");
	while (fd != std::string::npos)
	{
		mgcp.erase(mgcp.begin() + fd);
		fd = mgcp.find("  ", fd - 1);
	}
}
//-------------------------------------------------------------------------------------
/*bool MGCP::Valid()
{ 
	if (error == -1) return false;
	else return true;
}*/
//-------------------------------------------------------------------------------------