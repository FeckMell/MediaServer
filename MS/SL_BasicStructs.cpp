#include "stdafx.h"
#include "SL_BasicStructs.h"


RTP_struct::RTP_struct()
{
	Config();
}
//*///------------------------------------------------------------------------------------------
void RTP_struct::Config()
{
	header.version = 2;
	header.marker = 0;
	header.csrc_len = 0;
	header.extension = 0;
	header.padding = 0;
	header.ssrc = htons(10);
	header.payload_type = 8;
	header.timestamp = htonl(0);
	header.seq_no = htons(0);
}
//*///------------------------------------------------------------------------------------------
RTP* RTP_struct::Get(int ptime_)
{
	++amount;
	header.seq_no = htons(amount);
	header.timestamp = htonl(80 * ptime_ * amount);

	return &header;
}
//*///------------------------------------------------------------------------------------------
RTP* RTP_struct::Get()
{
	++amount;
	header.seq_no = htons(amount);
	header.timestamp = htonl(160 * amount);

	return &header;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
TIME2::TIME2()
{
	start = boost::posix_time::microsec_clock::local_time();
	last = boost::posix_time::microsec_clock::local_time();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
boost::posix_time::ptime TIME2::GetLast()
{
	return last;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
boost::posix_time::ptime TIME2::GetStart()
{
	return start;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void TIME2::Update()
{
	last = boost::posix_time::microsec_clock::local_time();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
boost::posix_time::time_duration TIME2::GetFullDuration()
{
	return start - boost::posix_time::microsec_clock::local_time();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
boost::posix_time::time_duration TIME2::GetInactiveTime()
{
	return last - boost::posix_time::microsec_clock::local_time();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
boost::posix_time::time_duration TIME2::GetActiveDuration()
{
	return start - last;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
vector<int> EVENTID::usedEventIDs = {};
//*///------------------------------------------------------------------------------------------
string EVENTID::ReserveEventID()
{
	int free_event_id = 0;
	if (usedEventIDs.size() == 0) { usedEventIDs.push_back(free_event_id);  return to_string(free_event_id); }
	for (unsigned i = 0; i < usedEventIDs.size(); ++i)
	{
		if (usedEventIDs[i] != free_event_id)
		{
			usedEventIDs.push_back(free_event_id);
			sort(usedEventIDs.begin(), usedEventIDs.end());
			return to_string(free_event_id);
		}
		free_event_id++;
	}
	usedEventIDs.push_back(free_event_id);
	sort(usedEventIDs.begin(), usedEventIDs.end());
	return to_string(free_event_id);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void EVENTID::FreeEventID(string event_id_)
{
	usedEventIDs.erase(remove(usedEventIDs.begin(), usedEventIDs.end(), stoi(event_id_)), usedEventIDs.end());
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------