#include "stdafx.h"
#include "SL_ffmpeg.h"

PACKET::PACKET()
{
	av_init_packet(&packet);
	packet.data = nullptr;
	packet.size = 0;
}
//*///------------------------------------------------------------------------------------------
PACKET::PACKET(size_t size_)
{
	if (size_ > 0)
		av_new_packet(&packet, size_);
	else
	{
		av_init_packet(&packet);
		packet.data = nullptr;
		packet.size = 0;
	}
}
//*///------------------------------------------------------------------------------------------
PACKET::PACKET(uint8_t* data_, int size_)
{
	if (size_ > 0 && data_ != nullptr)
	{
		av_new_packet(&packet, size_);
		memcpy(packet.data, data_, size_);
	}
}
PACKET::PACKET(PACKET* p1_, PACKET* p2_)
{
	/*if (p1_->Size() > 0 && p1_->Data() != nullptr)
	{
		if (p2_->Size() > 0 && p2_->Data() != nullptr)
		{
			av_new_packet(&packet, p1_->Size() + p2_->Size());
			memcpy(Data(), p1_->Data(), p1_->Size());
			memcpy(Data() + p1_->Size(), p2_->Data(), p2_->Size());
		}
		else
		{
			av_new_packet(&packet, p1_->Size());
			memcpy(Data(), p1_->Data(), p1_->Size());
		}
	}
	else
	{
		if (p2_->Size() > 0 && p2_->Data() != nullptr)
		{
			av_new_packet(&packet, p2_->Size());
			memcpy(Data(), p2_->Data(), p2_->Size());
		}
		else
		{
			av_init_packet(&packet);
			packet.data = nullptr;
			packet.size = 0;
		}
	}*/
}
//*///------------------------------------------------------------------------------------------
PACKET::~PACKET()
{
	Free();
}
//*///------------------------------------------------------------------------------------------
AVPacket* PACKET::Get()
{
	return &packet;
}
//*///------------------------------------------------------------------------------------------
int PACKET::Size()
{
	return packet.size;
}
//*///------------------------------------------------------------------------------------------
uint8_t* PACKET::Data()
{
	return packet.data;
}
//*///------------------------------------------------------------------------------------------
void PACKET::Free()
{
	av_free_packet(&packet);
}
//*///------------------------------------------------------------------------------------------
void PACKET::Add(AVPacket* packet_)
{
	AVPacket* new_packet;
	av_init_packet(new_packet);
	av_new_packet(new_packet, Size() + packet_->size);
	memcpy(new_packet->data, Data(), Size());
	memcpy(new_packet->data +Size(), packet_->data, packet_->size);
	Free();
	packet = *new_packet;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
FRAME::FRAME()
{
	frame = av_frame_alloc();
	empty = false;
}
//*///------------------------------------------------------------------------------------------
FRAME::FRAME(bool a)
{
	frame = av_frame_alloc();
	empty = true;
}
//*///------------------------------------------------------------------------------------------
FRAME::~FRAME()
{
	av_frame_free(&frame);
}
//*///------------------------------------------------------------------------------------------
AVFrame* FRAME::Get()
{
	return frame;
}
//*///------------------------------------------------------------------------------------------
void FRAME::Free()
{
	av_frame_free(&frame);
}
//*///------------------------------------------------------------------------------------------
bool FRAME::Empty()
{
	return empty;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
/*SHP_PACKET FFF::AddToPacket(SHP_PACKET packet1_, SHP_PACKET packet2_)
{
	if (packet1_ == nullptr)
	{
		return CreatePacket(packet2_->Data(), packet2_->Size());
	}
	else
	{
		SHP_PACKET result = make_shared<PACKET>(packet1_->Size() + packet2_->Size());
		memcpy(result->Data(), packet1_->Data(), packet1_->Size());
		memcpy(result->Data() + packet1_->Size(), packet2_->Data(), packet2_->Size());
		return result;
	}
}
//*///------------------------------------------------------------------------------------------
/*SHP_PACKET FFF::CreatePacket(uint8_t* data_, int size_)
{
	SHP_PACKET result = make_shared<PACKET>(size_);
	memcpy(result->Data(), data_, size_);
	return result;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
subjitter::subjitter() : frames(6)
{

}
//*///------------------------------------------------------------------------------------------
void subjitter::Push(SHP_FRAME frame_)
{
	frames.push_back(frame_);
}
//*///------------------------------------------------------------------------------------------
SHP_FRAME subjitter::Pop()
{
	if (frames.empty() == true) return nullptr;

	SHP_FRAME result = frames.front();
	frames.pop_front();
	return result;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
JITTER::JITTER()
{
	buffers.resize(3);
}
//*///------------------------------------------------------------------------------------------
void JITTER::Resize(int size_)
{
	buffers.clear();
	buffers.resize(size_);
}
//*///------------------------------------------------------------------------------------------
void JITTER::Push(SHP_FRAME frame_, int which_)
{
	buffers[which_].Push(frame_);
}
//*///------------------------------------------------------------------------------------------
SHP_FRAME JITTER::Pop(int which_)
{
	return buffers[which_].Pop();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------