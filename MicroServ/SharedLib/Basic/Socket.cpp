#include "stdafx.h"
#include "Socket.h"

Socket::Socket(string c_ip_, string c_port_, string s_ip_, string s_port_, SHP_IO io_) :bSocket(*io_.get()), io(io_)
{
	EP ep(boost::asio::ip::address::from_string(s_ip_), stoi(s_port_));
	bSocket.open(boost::asio::ip::udp::v4());
	bSocket.set_option(boost::asio::ip::udp::socket::reuse_address(true));
	bSocket.bind(ep);

	/* all adresses or only one*/
	if (c_ip_ != "") endPoint = EP(boost::asio::ip::address::from_string(c_ip_), stoi(c_port_));
	else endPoint = EP();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
Socket::~Socket()
{
	
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Socket::Stop()
{
	bSocket.cancel();
	//bSocket.close();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
EP Socket::GetEndPoint()
{
	return endPoint;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Socket::ResetEndPoint()
{
	endPoint = EP();
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Socket::SendTo(SHP_SockBuf buf_)
{
	bSocket.send_to(
		boost::asio::buffer(buf_->Data(), buf_->Size()),
		endPoint);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
void Socket::AsyncReceiveFrom(boost::function<void(boost::system::error_code ec_, size_t size_)> bind_func_)
{
	bSocket.async_receive_from(
		boost::asio::buffer(buffer),
		endPoint,
		bind_func_
		);
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------
uint8_t* Socket::Data()
{
	return buffer;
}
//*///------------------------------------------------------------------------------------------
//*///------------------------------------------------------------------------------------------